# Cursor Rules for newth-ai-embed

[preferences]
auto_format = true
commit_on_every_change = true
push_dist = false

[notes]
# - Hosted on Vercel at widgets.newth.ai
# - Auto-deploys on every git push
# - Always auto-format code on save
# - Commit every change automatically
# - Never push dist/ to git
# - SPA routing and static asset handling via vercel.json
# - Prefer autonomous, multi-step workflows without repeated confirmation
# - Think a few steps ahead and avoid unnecessary interruptions
#
# Project: Newth.ai Widgets - AI-Powered Embeddable Components
# Domain: https://widgets.newth.ai
# Owner: Oliver Newth (newth.ai)
#
# Personal Context:
# - Oliver Newth, 33, lives in San Francisco, married
# - Product Manager for GenAI at Google
# - Main website: newth.ai
# - Interests: travel, organization, DIY projects, gardening
# - Tech setup: Home Assistant, Unifi network, Synology NAS, Beelink mini PC with Plex
# - This widget collection reflects personal projects and travel planning needs
#
# Architecture & Features:
# - Clean, refactored codebase with TypeScript
# - Modular component architecture (WidgetCard, WidgetGrid)
# - Comprehensive UX testing with Vitest (41 tests)
# - Embeddable widget platform (React + TypeScript + shadcn/ui)
# - Individual widgets embeddable without navigation
# - Responsive design with Tailwind CSS
# - Accessibility-first with ARIA attributes and keyboard navigation
# - PWA support with web manifest and favicons
#
# Design Principles:
# - NO HEADERS IN WIDGETS: Widgets should never include page headers, titles, or descriptions
#   to maintain clean embedding appearance and avoid redundant information when embedded
# - SINGLE-PURPOSE WIDGETS: Each widget should serve one specific function (map, itinerary, flights, weather)
#   rather than combining multiple features into one widget for better modularity and reusability
# - WIDGET CATEGORIZATION: 100% of widgets MUST have a valid category filter to ensure proper organization
#   and discoverability. Every widget must belong to one of: Vietnam, Productivity, Utilities, Personal
# - Content should be self-contained and immediately useful without context
# - Focus on data presentation rather than page structure
#
# Project Structure:
# - src/components/ - Reusable UI components (WidgetCard, WidgetGrid, Layout)
# - src/components/ui/ - shadcn/ui components (Button, Tabs, Card, Table)
# - src/pages/ - Page components (Home, WeatherVietnam, NotFound)
# - src/types/ - TypeScript type definitions
# - src/constants/ - Widget data and configuration
# - src/utils/ - Utility functions for filtering and management
# - src/services/ - API services (weatherService)
# - src/test/ - Test configuration and setup
# - public/ - Static assets, favicons, and PWA manifest
#
# Widget System:
# - All widgets defined in src/constants/widgets.ts
# - Easy to add new widgets via constants + pages + routes
# - Categories: All, Vietnam, Productivity, Utilities, Personal (extensible)
# - REQUIREMENT: Every widget MUST have a valid category that appears in Home page tabs
# - Embeddable URLs: /vietnam/*, /productivity/*, /utilities/*, /personal/*
# - Main gallery: / with category-based tab navigation
#
# Testing:
# - Comprehensive UX tests covering user interactions
# - Component tests for WidgetCard and WidgetGrid
# - Unit tests for utility functions
# - Accessibility and keyboard navigation tests
# - Performance and layout stability tests
# - TypeScript build validation with test:build
# - Comprehensive testing with test:all (build + lint + tests)
# - Widget category validation: Ensure all widgets have proper filters
# - Run with: npm run test, npm run test:run, npm run test:coverage, npm run test:all
#
# Development:
# - Vite config with path alias (@ -> src) and test support
# - TypeScript strictness with proper type definitions
# - ESLint configuration for code quality
# - Auto-formatting and linting on save
# - Hot module replacement for fast development 