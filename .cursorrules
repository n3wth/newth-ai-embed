Newth.ai Widgets - Embeddable Component Development Guide

Key Principles

- Create embeddable, single-purpose React widgets with TypeScript and Tailwind CSS
- Focus on clean, modular architecture with strong type safety
- Ensure widgets are self-contained and immediately useful
- Maintain comprehensive test coverage using Vitest
- Follow strict widget implementation requirements

Project Configuration

- Domain: https://widgets.newth.ai
- Hosting: Vercel with auto-deployments
- Build System: Vite with TypeScript and path aliases
- Testing: Vitest with 54 comprehensive tests
- Styling: Tailwind CSS with shadcn/ui components

Widget Development Rules

1. Widget Structure
   - No headers or titles in embedded views
   - Single-purpose functionality only
   - Must have valid category: Vietnam, Productivity, Utilities, or Personal
   - Self-contained content without external context

2. Implementation Requirements
   - Component in src/pages/
   - Route in App.tsx
   - TypeScript types and error handling
   - Comprehensive tests
   - Category definition in widgets.ts

3. Embeddable URLs
   - /vietnam/*
   - /productivity/*
   - /utilities/*
   - /personal/*

Project Structure

- src/
  - components/
    - ui/ (shadcn components)
    - Layout.tsx
    - WidgetCard.tsx
    - WidgetGrid.tsx
  - pages/
  - types/
  - constants/
  - utils/
  - services/
  - test/
- public/

Development Workflow

1. Define widget in src/constants/widgets.ts
2. Create component with TypeScript and tests
3. Add route to App.tsx
4. Implement comprehensive tests
5. Commit and push changes
6. Verify auto-deployment

Testing Requirements

- Run test suites:
  ```bash
  npm run test          # Interactive
  npm run test:run     # Headless
  npm run test:coverage
  npm run test:all     # Full validation
  ```

- Test coverage must include:
  - Component rendering
  - Widget functionality
  - Accessibility
  - Keyboard navigation
  - Performance metrics

Code Quality Standards

- Use TypeScript with strict mode
- Follow ESLint configuration
- Implement proper error handling
- Maintain consistent code formatting
- Use descriptive commit messages

Accessibility and Performance

- Include ARIA attributes
- Ensure keyboard navigation
- Optimize for responsive layouts
- Follow PWA best practices
- Monitor performance metrics

Refer to React, TypeScript, Tailwind CSS, shadcn/ui and Phosphor icon documentation for detailed implementation guidance.